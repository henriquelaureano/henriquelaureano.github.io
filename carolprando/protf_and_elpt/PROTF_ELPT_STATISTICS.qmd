---
title: "PROTF & ELPT"
author: "Henrique Laureano"
format: html
editor: visual
code-line-numbers: true
code-fold: true
code-block-border-left: true
date-modified: 2025/04/18
editor_options: 
  chunk_output_type: console
toc: true
---

```{r pkgs}

if (!requireNamespace("pacman", quietly = TRUE)) 
  install.packages("pacman") 

pacman::p_load(
  ggplot2, googlesheets4, dplyr, lubridate, writexl, kableExtra, tidyr,
  patchwork
)
ggplot2::theme_set(
  theme_classic(base_size = 14) +
    theme(plot.title    = element_text(size = 14, face = "bold"),
          plot.subtitle = element_text(size = 13, face = "bold"),
          axis.text.x   = element_text(face = "bold"),
          axis.text.y   = element_text(face = "bold"),
          axis.title.x  = element_text(hjust = 0),
          axis.title.y  = element_text(hjust = 0, angle = 360),
          strip.text    = element_text(size = 13, face = "bold"))
)

```

# PROTF

```{r protf_data, warning=FALSE, message=FALSE}

protf_url <- 
  paste0(
    "https://docs.google.com/spreadsheets/d/",
    "1LnxvmEtdfOg2GRh2tIqtpbbSM6hcMHUym4vECO0OQuA/",
    "edit?gid=1659899554#gid=1659899554"
)
protf <- googlesheets4::read_sheet(protf_url) |> dplyr::distinct()

protf <- protf |> 
  dplyr::mutate(
    IDADE = lubridate::time_length(
      lubridate::interval(DN, DC), "years"
    ),
    CUTOFF = dplyr::case_when(
      IDADE  <  1              ~ 1.90,
      IDADE >=  1 & IDADE <  4 ~ 2.30,
      IDADE >=  4 & IDADE < 10 ~ 2.48,
      IDADE >= 10 & IDADE < 18 ~ 2.41,
      IDADE >= 18              ~ 2.40
    ),
    GRUPO = dplyr::case_when(
      CUTOFF == 1.90 ~      "< 1 ano",
      CUTOFF == 2.30 ~   "1 a 3 anos",
      CUTOFF == 2.48 ~   "4 a 9 anos",
      CUTOFF == 2.41 ~ "10 a 17 anos",
      CUTOFF == 2.40 ~    "> 18 anos"
    ) |> 
      factor(
        levels = c(
          "< 1 ano", 
          "1 a 3 anos", "4 a 9 anos", "10 a 17 anos", "> 18 anos"
        )
      ),
    VALOR = ifelse(RESULTADO < CUTOFF, "Abaixo", "Normal")
  )

```

Medidas resumo das datas de nascimento:

```{r}

summary(protf$DN)

```

E das datas de coleta:

```{r}

summary(protf$DC)

```

Idade:

```{r}

summary(protf$IDADE)

```

Resultados:

```{r}

summary(protf$RESULTADO)

```

Para cada grupo temos sua nota de corte, e assim mostramos quantos exames (**E**) estão abaixo (**ABA**) de tal *cutoff* e de quantos pacientes (**P**) diferentes geram esses exames (junto temos a média de exames por paciente).

```{r}

dplyr::full_join(
  protf |> 
  dplyr::reframe(
    E     = dplyr::n(), 
    P     = dplyr::n_distinct(PRONTUARIO),
    MEDIA = E / P,
    .by   = c(GRUPO, CUTOFF)
  ) |> 
  dplyr::arrange(GRUPO),
  
  protf |> 
    dplyr::filter(RESULTADO < CUTOFF) |> 
    dplyr::reframe(
      E_ABA     = dplyr::n(), 
      P_ABA     = dplyr::n_distinct(PRONTUARIO),
      MEDIA_ABA = E_ABA / P_ABA,
      .by       = c(GRUPO, CUTOFF)
    ) |> 
    dplyr::arrange(GRUPO), 
  
  by = c("GRUPO", "CUTOFF")
) |> 
  dplyr::mutate(
    PROP_E = E_ABA / E,
    PROP_P = P_ABA / P
  ) |> 
  kableExtra::kbl(digits = 3) |> 
  kableExtra::row_spec(0, bold = TRUE) |> 
  kableExtra::column_spec(1, bold = TRUE)

```

4961 diferentes prontuários / pacientes.

```{r}

protf |> 
  dplyr::count(PRONTUARIO) |> 
  dplyr::arrange(dplyr::desc(n))
  
```

Destes, 1738 fizeram o exame mais de uma vez (`r round(1738/4961 * 100, 2)`%) - o que fez mais vezes, fez 69 vezes.

```{r}

protf |> 
  dplyr::count(PRONTUARIO) |> 
  dplyr::arrange(dplyr::desc(n)) |> 
  dplyr::filter(n > 1)

```

Abaixo, cada linha é um paciente/prontuário.

```{r protf, fig.width=10, fig.height=5.5}

protf_ids <- protf |> 
  dplyr::count(PRONTUARIO) |> 
  dplyr::arrange(dplyr::desc(n)) |> 
  dplyr::filter(n > 1) |> 
  dplyr::pull(PRONTUARIO)

protf |>
  dplyr::filter(PRONTUARIO %in% protf_ids) |>
  dplyr::select(c(PRONTUARIO, SEXO, DC, GRUPO, RESULTADO)) |> 
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::group_by(PRONTUARIO, SEXO) |>
  dplyr::mutate(COLETA = dplyr::row_number()) |>
  dplyr::ungroup() |> 
  ggplot() +
  aes(x = COLETA, y = RESULTADO, group = PRONTUARIO, color = GRUPO) +
  geom_vline(
    xintercept = c(1, seq(from = 5, to = 65, by = 5), 69),
    linetype = "dashed"
  ) +
  geom_hline(
    yintercept = seq(from = 0, to = 7.5, by = 0.5),
    linetype = "dashed"
  ) +
  geom_line(linewidth = 0.75) +
  facet_wrap(
    ~ SEXO,
    labeller = ggplot2::labeller(SEXO = \(x) paste("Sexo:", x))
  ) +
  scale_x_continuous(
    breaks = c(1, seq(from = 10, to = 60, by = 10), 69)
  ) +
  scale_y_continuous(breaks = seq(from = 0, to = 8, by = 1)) +
  labs(x = "Coleta", y = "Resultado", color = "Grupo", 
    title = "PROTF - Proteínas Totais e Frações",
    subtitle = paste(
      "Apenas pacientes que fizeram o exame mais de uma vez", 
      "(1738 pacientes)"
    )
  ) +
  theme(legend.position = "bottom")

```

```{r protf_trans, fig.width=10, fig.height=5.5}

protf_ids_var <- protf |>
  dplyr::filter(PRONTUARIO %in% protf_ids) |>
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::count(PRONTUARIO, VALOR) |>
  tidyr::pivot_wider(values_from = n, names_from = VALOR, values_fill = 0) |> 
  dplyr::filter(! Abaixo == 0) |> 
  dplyr::pull(PRONTUARIO)

protf_ids_sort <- protf |>
  dplyr::filter(PRONTUARIO %in% protf_ids_var) |> 
  dplyr::count(PRONTUARIO) |> 
  dplyr::arrange(dplyr::desc(n)) |> 
  dplyr::pull(PRONTUARIO)

protf |>
  dplyr::filter(PRONTUARIO %in% protf_ids_var) |>
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::select(PRONTUARIO, SEXO, VALOR) |> 
  dplyr::mutate(PRONTUARIO = factor(PRONTUARIO, levels = protf_ids_sort)) |>
  dplyr::group_by(PRONTUARIO, SEXO) |>
  dplyr::mutate(COLETA = dplyr::row_number() |> as.factor()) |>
  dplyr::ungroup() |> 
  ggplot() +
  aes(x = PRONTUARIO, y = COLETA, fill = VALOR) +
  geom_tile() +
  # geom_vline(
  #   xintercept = seq(70) - 0.5,
  #   linetype = "dashed", alpha = 0.5
  # ) +
  facet_wrap(
    ~ SEXO,
    scales = "free_x",
    labeller = ggplot2::labeller(SEXO = \(x) paste("Sexo:", x))
  ) +
  scale_x_discrete(labels = NULL, breaks = NULL) +
  scale_y_discrete(
    breaks = c("1", "10", "20", "30", "40", "50", "60", "69")
  ) +
  labs(
    x = "Prontuário", y = "Coleta", fill = "Cutoff",
    title = "PROTF - Proteínas Totais e Frações",
    subtitle = paste(
      "Pacientes com mais de uma coleta e que ficaram abaixo do cutoff ao",
      "menos uma vez (718 pacientes)"
    )
  ) +
  theme(legend.position = "bottom")

```

Acima, cada linha vertical é um paciente. Se ela muda de cor significa que houve variação em termos de abaixo ou não do cutoff do momento (com base na idade).

Abaixo, a mesma informação dos dois gráficos acima mas vistos de uma maneira alternativa.

```{r protf_grupo, fig.width=10, fig.height=7}

protf |>
  dplyr::filter(PRONTUARIO %in% protf_ids) |>
  dplyr::select(c(PRONTUARIO, SEXO, DC, GRUPO, RESULTADO)) |> 
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::group_by(PRONTUARIO, SEXO) |>
  dplyr::mutate(COLETA = dplyr::row_number()) |>
  dplyr::ungroup() |> 
  ggplot() +
  aes(x = COLETA, y = RESULTADO, group = PRONTUARIO, color = SEXO) +
  geom_vline(
    xintercept = c(1, seq(from = 5, to = 65, by = 5), 69),
    linetype = "dashed"
  ) +
  geom_hline(
    yintercept = seq(from = 0, to = 7.5, by = 0.5),
    linetype = "dashed"
  ) +
  geom_line(linewidth = 0.75) +
  facet_wrap(~ GRUPO) +
  scale_x_continuous(
    breaks = c(1, seq(from = 10, to = 60, by = 10), 69)
  ) +
  scale_y_continuous(breaks = seq(from = 0, to = 8, by = 1)) +
  labs(x = "Coleta", y = "Resultado", color = "Sexo", 
    title = "PROTF - Proteínas Totais e Frações",
    subtitle = paste(
      "Apenas pacientes que fizeram o exame mais de uma vez", 
      "(1738 pacientes)"
    )
  ) +
  theme(legend.position = "bottom")

```

```{r protf_grupo_var, fig.height=5.5, fig.width=10}

protf |>
  dplyr::filter(PRONTUARIO %in% protf_ids_var) |>
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::select(PRONTUARIO, SEXO, VALOR) |> 
  dplyr::mutate(PRONTUARIO = factor(PRONTUARIO, levels = protf_ids_sort)) |>
  dplyr::group_by(PRONTUARIO, SEXO) |>
  dplyr::mutate(COLETA = dplyr::row_number() |> as.factor()) |>
  dplyr::ungroup() |> 
  ggplot() +
  aes(y = PRONTUARIO, x = COLETA, fill = VALOR) +
  geom_tile() +
  # geom_vline(
  #   xintercept = seq(70) - 0.5,
  #   linetype = "dashed", alpha = 0.5
  # ) +
  facet_wrap(
    ~ SEXO,
    scales = "free_y",
    labeller = ggplot2::labeller(SEXO = \(x) paste("Sexo:", x))
  ) +
  scale_y_discrete(labels = NULL, breaks = NULL) +
  scale_x_discrete(
    breaks = c("1", "10", "20", "30", "40", "50", "60", "69")
  ) +
  labs(
    y = "Prontuário", x = "Coleta", fill = "Cutoff",
    title = "PROTF - Proteínas Totais e Frações",
    subtitle = paste(
      "Pacientes com mais de uma coleta e que ficaram abaixo do cutoff ao",
      "menos uma vez (718 pacientes)"
    )
  ) +
  theme(legend.position = "bottom")

```

# ELPT

```{r elpt_data, warning=FALSE, message=FALSE}

elpt_url <- 
  paste0(
    "https://docs.google.com/spreadsheets/d/",
    "1h3FjWJsUuuGQFBAVHQJaUgQ3jqgImb5Ioi3JAx900Rc/",
    "edit?gid=1275014391#gid=1275014391"
  )
elpt <- googlesheets4::read_sheet(elpt_url) |> dplyr::distinct()

elpt <- elpt |> 
  dplyr::mutate(
    IDADE = lubridate::time_length(
      lubridate::interval(DN, DC), "years"
    ),
    RESULTADO = unlist(elpt$RESULTADO),
    RESULTADO = gsub(",", ".", RESULTADO) |> as.numeric(),
    CUTOFF = dplyr::case_when(
      IDADE  <  1              ~    NA,
      IDADE >=  1 & IDADE <  4 ~ 0.550,
      IDADE >=  4 & IDADE < 10 ~ 0.565,
      IDADE >= 10 & IDADE < 18 ~ 0.620,
      IDADE >= 18              ~ 0.715
    ),
    GRUPO = dplyr::case_when(
      CUTOFF  %in% NA ~      "< 1 ano",
      CUTOFF == 0.550 ~   "1 a 3 anos",
      CUTOFF == 0.565 ~   "4 a 9 anos",
      CUTOFF == 0.620 ~ "10 a 17 anos",
      CUTOFF == 0.715 ~    "> 18 anos"
    ) |> 
      factor(
        levels = c(
          "< 1 ano", 
          "1 a 3 anos", "4 a 9 anos", "10 a 17 anos", "> 18 anos"
        )
      ),
    VALOR = ifelse(RESULTADO < CUTOFF, "Abaixo", "Normal")
  )

```

Resultados:

```{r}

summary(elpt$RESULTADO)

```

Medidas resumo das datas de nascimento:

```{r}

summary(elpt$DN)

```

E das datas de coleta:

```{r}

summary(elpt$DC)

```

Idade:

```{r}

summary(elpt$IDADE)

```

Para cada grupo temos sua nota de corte, e assim mostramos quantos exames (**E**) estão abaixo (**ABA**) de tal *cutoff* e de quantos pacientes (**P**) diferentes geram esses exames (junto temos a média de exames por paciente).

```{r}

dplyr::full_join(
  elpt |> 
  dplyr::reframe(
    E     = dplyr::n(), 
    P     = dplyr::n_distinct(PRONTUARIO),
    MEDIA = E / P,
    .by   = c(GRUPO, CUTOFF)
  ) |> 
  dplyr::arrange(GRUPO),
  
  elpt |> 
    dplyr::filter(RESULTADO < CUTOFF) |> 
    dplyr::reframe(
      E_ABA     = dplyr::n(), 
      P_ABA     = dplyr::n_distinct(PRONTUARIO),
      MEDIA_ABA = E_ABA / P_ABA,
      .by       = c(GRUPO, CUTOFF)
    ) |> 
    dplyr::arrange(GRUPO), 
  
  by = c("GRUPO", "CUTOFF")
) |> 
  dplyr::mutate(
    PROP_E = E_ABA / E,
    PROP_P = P_ABA / P
  ) |> 
  kableExtra::kbl(digits = 3) |> 
  kableExtra::row_spec(0, bold = TRUE) |> 
  kableExtra::column_spec(1, bold = TRUE)

```

2543 diferentes prontuários / pacientes.

```{r}

elpt |> 
  dplyr::count(PRONTUARIO) |> 
  dplyr::arrange(dplyr::desc(n))

```

Destes, 607 fizeram o exame mais de uma vez (`r round(607/2543 * 100, 2)`%) - o que fez mais vezes, fez 30 vezes.

```{r}

elpt |> 
  dplyr::count(PRONTUARIO) |> 
  dplyr::arrange(dplyr::desc(n)) |> 
  dplyr::filter(n > 1)

```

Abaixo, cada linha é um paciente/prontuário.

```{r elpt, fig.width=10, fig.height=5.5}

elpt_ids <- elpt |> 
  dplyr::count(PRONTUARIO) |> 
  dplyr::arrange(dplyr::desc(n)) |> 
  dplyr::filter(n > 1) |> 
  dplyr::pull(PRONTUARIO)

elpt |>
  dplyr::filter(PRONTUARIO %in% elpt_ids) |>
  dplyr::select(c(PRONTUARIO, SEXO, DC, GRUPO, RESULTADO)) |> 
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::group_by(PRONTUARIO, SEXO) |>
  dplyr::mutate(COLETA = dplyr::row_number()) |>
  dplyr::ungroup() |> 
  ggplot() +
  aes(x = COLETA, y = RESULTADO, group = PRONTUARIO, color = GRUPO) +
  geom_vline(
    xintercept = c(1, seq(from = 5, to = 30, by = 5)),
    linetype = "dashed"
  ) +
  geom_hline(
    yintercept = seq(from = 0, to = 5, by = 0.5),
    linetype = "dashed"
  ) +
  geom_line(linewidth = 0.75) +
  facet_wrap(
    ~ SEXO,
    labeller = ggplot2::labeller(SEXO = \(x) paste("Sexo:", x))
  ) +
  scale_x_continuous(
    breaks = c(1, seq(from = 5, to = 30, by = 5))
  ) +
  scale_y_continuous(breaks = seq(from = 0, to = 5, by = 0.5)) +
  labs(
    x = "Coleta", y = "Resultado", color = "Grupo", 
    title = "ELPT - eletroforese de proteínas",
    subtitle = paste(
      "Apenas pacientes que fizeram o exame mais de uma vez", 
      "(607 pacientes)"
    )
  ) +
  theme(legend.position = "bottom")

```

Abaixo, cada linha vertical é um paciente. Se ela muda de cor significa que houve variação em termos de abaixo ou não do cutoff do momento (com base na idade).

```{r elpt_trans, fig.width=10, fig.height=5.5}

elpt_ids_var <- elpt |>
  dplyr::filter(PRONTUARIO %in% elpt_ids) |>
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::count(PRONTUARIO, VALOR) |>
  tidyr::drop_na() |> 
  tidyr::pivot_wider(values_from = n, names_from = VALOR, values_fill = 0) |> 
  dplyr::filter(! Abaixo == 0) |> 
  dplyr::pull(PRONTUARIO)

elpt_ids_sort <- elpt |>
  dplyr::filter(PRONTUARIO %in% elpt_ids_var) |> 
  dplyr::count(PRONTUARIO) |> 
  dplyr::arrange(dplyr::desc(n)) |> 
  dplyr::pull(PRONTUARIO)

elpt |>
  dplyr::filter(PRONTUARIO %in% elpt_ids_var) |>
  tidyr::drop_na() |> 
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::select(PRONTUARIO, SEXO, VALOR) |> 
  dplyr::mutate(PRONTUARIO = factor(PRONTUARIO, levels = elpt_ids_sort)) |>
  dplyr::group_by(PRONTUARIO, SEXO) |>
  dplyr::mutate(COLETA = dplyr::row_number() |> as.factor()) |>
  dplyr::ungroup() |> 
  ggplot() +
  aes(x = PRONTUARIO, y = COLETA, fill = VALOR) +
  geom_tile() +
  geom_hline(
    yintercept = seq(16) - 0.5,
    linetype = "dashed", alpha = 0.5
  ) +
  facet_wrap(
    ~ SEXO,
    scales = "free_x",
    labeller = ggplot2::labeller(SEXO = \(x) paste("Sexo:", x))
  ) +
  scale_x_discrete(labels = NULL, breaks = NULL) +
  scale_y_discrete(breaks = c("1", "3", "6", "9", "12", "15")) +
  labs(
    x = "Prontuário", y = "Coleta", fill = "Cutoff",
    title = "ELPT - eletroforese de proteínas",
    subtitle = paste(
      "Pacientes com mais de uma coleta e que ficaram abaixo do cutoff ao",
      "menos uma vez (71 pacientes)"
    )
  ) +
  theme(legend.position = "bottom")

```

Abaixo, a mesma informação dos dois gráficos acima mas vistos de uma maneira alternativa.

```{r elpt_grupo, fig.width=10, fig.height=7}

elpt |>
  dplyr::filter(PRONTUARIO %in% elpt_ids) |>
  dplyr::select(c(PRONTUARIO, SEXO, DC, GRUPO, RESULTADO)) |> 
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::group_by(PRONTUARIO, SEXO) |>
  dplyr::mutate(COLETA = dplyr::row_number()) |>
  dplyr::ungroup() |> 
  ggplot() +
  aes(x = COLETA, y = RESULTADO, group = PRONTUARIO, color = SEXO) +
  geom_vline(
    xintercept = c(1, seq(from = 5, to = 30, by = 5)),
    linetype = "dashed"
  ) +
  geom_hline(
    yintercept = seq(from = 0, to = 5, by = 0.5),
    linetype = "dashed"
  ) +
  geom_line(linewidth = 0.75) +
  facet_wrap(~ GRUPO) +
  scale_x_continuous(breaks = c(1, seq(from = 5, to = 30, by = 5))) +
  scale_y_continuous(breaks = seq(from = 0, to = 5, by = 0.5)) +
  labs(
    x = "Coleta", y = "Resultado", color = "Grupo", 
    title = "ELPT - eletroforese de proteínas",
    subtitle = paste(
      "Apenas pacientes que fizeram o exame mais de uma vez", 
      "(607 pacientes)"
    )
  ) +
  theme(legend.position = "bottom")

```

```{r elpt_grupo_var, fig.height=5.5, fig.width=10}

elpt |>
  dplyr::filter(PRONTUARIO %in% elpt_ids_var) |>
  tidyr::drop_na() |> 
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::select(PRONTUARIO, SEXO, VALOR) |> 
  dplyr::mutate(PRONTUARIO = factor(PRONTUARIO, levels = elpt_ids_sort)) |>
  dplyr::group_by(PRONTUARIO, SEXO) |>
  dplyr::mutate(COLETA = dplyr::row_number() |> as.factor()) |>
  dplyr::ungroup() |> 
  ggplot() +
  aes(y = PRONTUARIO, x = COLETA, fill = VALOR) +
  geom_tile() +
  geom_vline(
    xintercept = seq(16) - 0.5,
    linetype = "dashed", alpha = 0.5
  ) +
  facet_wrap(
    ~ SEXO,
    scales = "free_y",
    labeller = ggplot2::labeller(SEXO = \(x) paste("Sexo:", x))
  ) +
  scale_y_discrete(labels = NULL, breaks = NULL) +
  scale_x_discrete(breaks = c("1", "3", "6", "9", "12", "15")) +
  labs(
    y = "Prontuário", x = "Coleta", fill = "Cutoff",
    title = "ELPT - eletroforese de proteínas",
    subtitle = paste(
      "Pacientes com mais de uma coleta e que ficaram abaixo do cutoff ao",
      "menos uma vez (71 pacientes)"
    )
  ) +
  theme(legend.position = "bottom")

```

# Juntos

```{r join}

dat <- dplyr::full_join(
  
  protf |> 
  dplyr::select(PRONTUARIO, DC, EXAME, VALOR) |> 
  dplyr::mutate(PRONTUARIO = as.character(PRONTUARIO)) |> 
  dplyr::rename(DC_PROTF = DC) |> 
  dplyr::rename(EXAME_PROTF = EXAME) |> 
  dplyr::rename(VALOR_PROTF = VALOR),

  elpt |> 
  dplyr::select(PRONTUARIO, DC, EXAME, VALOR) |> 
  dplyr::rename(DC_ELPT = DC)|> 
  dplyr::rename(EXAME_ELPT = EXAME) |> 
  dplyr::rename(VALOR_ELPT = VALOR),
  
  by = "PRONTUARIO", relationship = "many-to-many"
) |> 
  dplyr::arrange(PRONTUARIO)

```

Juntando as bases dos dois exames temos 6.948 diferentes pacientes.

```{r}

dat |> dplyr::count(PRONTUARIO) |> dplyr::arrange(dplyr::desc(n))

```

556 pacientes fizeram ambos exames.

```{r}

dat |> 
  dplyr::count(PRONTUARIO, EXAME_PROTF, EXAME_ELPT) |> 
  tidyr::drop_na() |> 
  dplyr::arrange(dplyr::desc(n))

```

4.405 fizeram apenas o PROTF.

```{r}

dat |> 
  dplyr::count(PRONTUARIO, EXAME_PROTF, EXAME_ELPT) |> 
  dplyr::filter(EXAME_ELPT %in% NA) |> 
  dplyr::arrange(dplyr::desc(n))

```

1.987 fizeram apenas o ELPT.

```{r}

dat |> 
  dplyr::count(PRONTUARIO, EXAME_PROTF, EXAME_ELPT) |> 
  dplyr::filter(EXAME_PROTF %in% NA) |> 
  dplyr::arrange(dplyr::desc(n))

```

Ou seja, 8% fizeram ambos, 63.4% fizeram apenas o PROTF e 28.6% fizeram apenas o ELPT.

```{r}

c(556, 4405, 1987) |> prop.table() |> round(3)

```

Dos 4.961 que fizeram PROTF, 1189 apresentaram valor abaixo da linha de corte pelo menos uma vez. Ou seja, 24% dos pacientes (que fizeram PROTF).

```{r}

protf |> 
  dplyr::count(PRONTUARIO, VALOR) |> 
  dplyr::filter(VALOR %in% "Abaixo") |> nrow()

protf |> 
  dplyr::count(PRONTUARIO, VALOR) |> 
  dplyr::filter(VALOR %in% "Abaixo") |> nrow() / 
  
  protf |> dplyr::count(PRONTUARIO) |> nrow()

```

Dos 2.543 que fizeram ELPT, 207 apresentaram valor abaixo da linha de corte pelo menos uma vez. Ou seja, 8.1% dos pacientes (que fizeram ELPT).

```{r}

elpt |> 
  dplyr::count(PRONTUARIO, VALOR) |> 
  dplyr::filter(VALOR %in% "Abaixo") |> nrow()

elpt |> 
  dplyr::count(PRONTUARIO, VALOR) |> 
  dplyr::filter(VALOR %in% "Abaixo") |> nrow() / 
  
  elpt |> dplyr::count(PRONTUARIO) |> nrow()

```

Dos 4.961 que fizeram PROTF, 207 apresentaram valor abaixo da linha de corte mais que uma vez. Ou seja, 8% dos pacientes.

```{r}

protf |> 
  dplyr::filter(PRONTUARIO %in% protf_ids) |> 
  dplyr::count(PRONTUARIO, VALOR) |> 
  dplyr::filter(VALOR %in% "Abaixo" & n > 1) |> nrow()

protf |> 
  dplyr::filter(PRONTUARIO %in% protf_ids) |> 
  dplyr::count(PRONTUARIO, VALOR) |> 
  dplyr::filter(VALOR %in% "Abaixo" & n > 1) |> nrow() / 
  
  protf |> dplyr::count(PRONTUARIO) |> nrow()

```

Dos 2.543 que fizeram ELPT, 17 apresentaram valor abaixo da linha de corte mais que uma vez. Ou seja, 0.67% dos pacientes.

```{r}

elpt |> 
  dplyr::filter(PRONTUARIO %in% elpt_ids) |> 
  dplyr::count(PRONTUARIO, VALOR) |> 
  dplyr::filter(VALOR %in% "Abaixo" & n > 1) |> nrow()

elpt |> 
  dplyr::filter(PRONTUARIO %in% elpt_ids) |> 
  dplyr::count(PRONTUARIO, VALOR) |> 
  dplyr::filter(VALOR %in% "Abaixo" & n > 1) |> nrow() / 
  
  elpt |> dplyr::count(PRONTUARIO) |> nrow()

```

Dos 6.948 pacientes (total, ambos ou apenas um), 1.398 apresentaram valor abaixo da linha de corte pelo menos uma vez. Ou seja, 20.1% dos pacientes.

```{r}

dat |> 
  dplyr::count(PRONTUARIO, VALOR_PROTF, VALOR_ELPT) |> 
  dplyr::filter(VALOR_PROTF %in% "Abaixo" | VALOR_ELPT %in% "Abaixo") |> 
  dplyr::arrange(dplyr::desc(n))

dat |> 
  dplyr::count(PRONTUARIO, VALOR_PROTF, VALOR_ELPT) |> 
  dplyr::filter(VALOR_PROTF %in% "Abaixo" | VALOR_ELPT %in% "Abaixo") |> 
  nrow() /
  
  dat |> dplyr::count(PRONTUARIO) |> nrow()

```

Dos 6.948 pacientes (total, ambos ou apenas um), 474 apresentaram valor abaixo da linha de corte mais que uma vez. Ou seja, 6.8% dos pacientes.

```{r}

ids <- lubridate::union(protf_ids |> as.character(), elpt_ids)

dat |> 
  dplyr::filter(PRONTUARIO %in% ids) |> 
  dplyr::count(PRONTUARIO, VALOR_PROTF, VALOR_ELPT) |> 
  dplyr::filter(VALOR_PROTF %in% "Abaixo" | VALOR_ELPT %in% "Abaixo") |> 
  dplyr::filter(n > 1) |> 
  dplyr::arrange(dplyr::desc(n))

dat |> 
  dplyr::filter(PRONTUARIO %in% ids) |> 
  dplyr::count(PRONTUARIO, VALOR_PROTF, VALOR_ELPT) |> 
  dplyr::filter(VALOR_PROTF %in% "Abaixo" | VALOR_ELPT %in% "Abaixo") |> 
  dplyr::filter(n > 1) |> nrow() / 
  
  dat |> dplyr::count(PRONTUARIO) |> nrow()

```

# IgG

```{r igb_data, warning=FALSE, message=FALSE}

igg_url <- 
  paste0(
    "https://docs.google.com/spreadsheets/d/",
    "1wdHBiG9ErDBeJdIcJ-WSd1cZrqXuqQ5uX8BfXkNqgWA/",
    "edit?gid=0#gid=0"
)

igg <- googlesheets4::read_sheet(igg_url)

igg <- igg |> 
  dplyr::mutate(
    IDADE = lubridate::time_length(
      lubridate::interval(DN, DC), "years"
    ),
    GRUPO = cut(
      IDADE, 
      breaks = c(0, 1, 4, 10, 18, 100), 
      right = FALSE,
      labels = c(
        "< 1 ano", "1 a 3 anos", "4 a 9 anos", "10 a 17 anos", "> 18 anos"
      )
    )
  )

```

6012 diferentes pacientes. O que mais fez exames, fez 47 vezes.

Aqui temos todos os pacientes que fizeram esse exame. Na tabela \_wide da PROFT e ELPT, permaneceram apenas aqueles que fizeram o PROTF e ELPT.

```{r}

igg |>
  dplyr::count(PRONTUARIO) |> 
  dplyr::arrange(dplyr::desc(n))

```

```{r}

igg_wide <- igg |>
  dplyr::select(
    c(PRONTUARIO, DC, IDADE, GRUPO, RESULTADO)
  ) |> 
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::group_by(PRONTUARIO) |>
  dplyr::mutate(COLETA = dplyr::row_number()) |>
  tidyr::pivot_wider(
    names_from = COLETA,
    values_from = c(DC, RESULTADO, IDADE, GRUPO),
    names_glue = "{.value}_IgG_{COLETA}",
    names_vary = "slowest"
  ) |>
  dplyr::ungroup()

protf_wide <- protf |>
  dplyr::select(
    c(PRONTUARIO, SEXO, DN, DC, IDADE, CUTOFF, GRUPO, RESULTADO, VALOR)
  ) |> 
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::group_by(PRONTUARIO, SEXO, DN) |>
  dplyr::mutate(COLETA = dplyr::row_number()) |>
  tidyr::pivot_wider(
    names_from = COLETA,
    values_from = c(DC, RESULTADO, IDADE, CUTOFF, GRUPO, VALOR),
    names_glue = "{.value}_{COLETA}",
    names_vary = "slowest"
  ) |>
  dplyr::ungroup()

protf_wide |>
  writexl::write_xlsx(
    paste0(
      '/Users/henriquelaureano/git/henriquelaureano.github.io/',
      'carolprando/protf_and_elpt/protf_wide.xlsx'
    )
  )

protf_wide |>
  dplyr::left_join(igg_wide, by = "PRONTUARIO") |>
  writexl::write_xlsx(
    paste0(
       '/Users/henriquelaureano/git/henriquelaureano.github.io/',
       'carolprando/protf_and_elpt/protf_plus_igg_wide.xlsx'
    )
  )

elpt_wide <- elpt |>
  dplyr::select(
    c(PRONTUARIO, SEXO, DN, DC, IDADE, CUTOFF, GRUPO, RESULTADO, VALOR)
  ) |> 
  dplyr::arrange(PRONTUARIO, DC) |>
  dplyr::group_by(PRONTUARIO, SEXO, DN) |>
  dplyr::mutate(COLETA = dplyr::row_number()) |>
  tidyr::pivot_wider(
    names_from = COLETA,
    values_from = c(DC, RESULTADO, IDADE, CUTOFF, GRUPO, VALOR),
    names_glue = "{.value}_{COLETA}",
    names_vary = "slowest"
  ) |>
  dplyr::ungroup()

elpt_wide |>
  writexl::write_xlsx(
    paste0(
      '/Users/henriquelaureano/git/henriquelaureano.github.io/',
      'carolprando/protf_and_elpt/elpt_wide.xlsx'
    )
  )

elpt_wide |>
  dplyr::mutate(PRONTUARIO = as.numeric(PRONTUARIO)) |>
  dplyr::left_join(igg_wide, by = "PRONTUARIO") |>
  writexl::write_xlsx(
    paste0(
      '/Users/henriquelaureano/git/henriquelaureano.github.io/',
      'carolprando/protf_and_elpt/elpt_plus_igg_wide.xlsx'
    )
  )

```

# Exames no mesmo mês (intervalo de 30 dias)

535 pacientes fizeram em algum momento PROTF e IgG com um diferença de tempo menor ou igual a 30 dias.

```{r}

protf_igg_same30d <- 
  
  dplyr::inner_join(
    
    protf |>
      dplyr::select(
        c(PRONTUARIO, SEXO, DN, DC, IDADE, CUTOFF, GRUPO, RESULTADO, VALOR)
      ) |> 
      dplyr::arrange(PRONTUARIO, DC) |>
      dplyr::group_by(PRONTUARIO, SEXO, DN) |>
      dplyr::mutate(COLETA_PROTF = dplyr::row_number()) |>
      dplyr::ungroup() |> 
      dplyr::rename(DC_PROTF = DC) |> 
      dplyr::rename(IDADE_PROTF = IDADE) |> 
      dplyr::rename(GRUPO_PROTF = GRUPO) |> 
      dplyr::rename(RESULTADO_PROTF = RESULTADO),
    
    igg |>
      dplyr::select(
        c(PRONTUARIO, DC, IDADE, GRUPO, RESULTADO)
      ) |> 
      dplyr::arrange(PRONTUARIO, DC) |>
      dplyr::group_by(PRONTUARIO) |>
      dplyr::mutate(COLETA_IgG = dplyr::row_number()) |> 
      dplyr::ungroup() |> 
      dplyr::rename(DC_IgG = DC) |> 
      dplyr::rename(IDADE_IgG = IDADE) |> 
      dplyr::rename(GRUPO_IgG = GRUPO) |> 
      dplyr::rename(RESULTADO_IgG = RESULTADO),
    
    by = "PRONTUARIO", relationship = "many-to-many"
    
  ) |> 
  dplyr::mutate(
    DIAS_ENTRE_EXAMES = abs(
      as.numeric(difftime(DC_PROTF, DC_IgG, units = "days"))
    ),
    SAME_30d = DIAS_ENTRE_EXAMES <= 30
  ) |> 
  dplyr::filter(SAME_30d == TRUE) |> dplyr::select(!SAME_30d)

protf_igg_same30d |> 
  writexl::write_xlsx(
    paste0(
      '/Users/henriquelaureano/git/henriquelaureano.github.io/',
      'carolprando/protf_and_elpt/protf_plus_igg_same30d_window.xlsx'
    )
  )

# protf_igg_same30d |> dplyr::count(PRONTUARIO) |> dplyr::arrange(dplyr::desc(n))

# protf_igg_same30d |> dplyr::count(PRONTUARIO) |> nrow()

```

1112 pacientes fizeram em algum momento ELPT e IgG com um diferença de tempo menor ou igual a 30 dias.

```{r}

elpt_igg_same30d <- 
  
  dplyr::inner_join(
    
    elpt |>
      dplyr::select(
        c(PRONTUARIO, SEXO, DN, DC, IDADE, CUTOFF, GRUPO, RESULTADO, VALOR)
      ) |>
      
      dplyr::mutate(PRONTUARIO = as.numeric(PRONTUARIO)) |> 
      
      dplyr::arrange(PRONTUARIO, DC) |>
      dplyr::group_by(PRONTUARIO, SEXO, DN) |>
      dplyr::mutate(COLETA_ELPT = dplyr::row_number()) |>
      dplyr::ungroup() |> 
      dplyr::rename(DC_ELPT = DC) |> 
      dplyr::rename(IDADE_ELPT = IDADE) |> 
      dplyr::rename(GRUPO_ELPT = GRUPO) |> 
      dplyr::rename(RESULTADO_ELPT = RESULTADO),
    
    igg |>
      dplyr::select(
        c(PRONTUARIO, DC, IDADE, GRUPO, RESULTADO)
      ) |> 
      dplyr::arrange(PRONTUARIO, DC) |>
      dplyr::group_by(PRONTUARIO) |>
      dplyr::mutate(COLETA_IgG = dplyr::row_number()) |> 
      dplyr::ungroup() |> 
      dplyr::rename(DC_IgG = DC) |> 
      dplyr::rename(IDADE_IgG = IDADE) |> 
      dplyr::rename(GRUPO_IgG = GRUPO) |> 
      dplyr::rename(RESULTADO_IgG = RESULTADO),
    
    by = "PRONTUARIO", relationship = "many-to-many"
    
  ) |> 
  dplyr::mutate(
    DIAS_ENTRE_EXAMES = abs(
      as.numeric(difftime(DC_ELPT, DC_IgG, units = "days"))
    ),
    SAME_30d = DIAS_ENTRE_EXAMES <= 30
  ) |> 
  dplyr::filter(SAME_30d == TRUE) |> 
  dplyr::select(!SAME_30d) 

elpt_igg_same30d |> 
  writexl::write_xlsx(
    paste0(
      '/Users/henriquelaureano/git/henriquelaureano.github.io/',
      'carolprando/protf_and_elpt/elpt_plus_igg_same30d_window.xlsx'
    )
  )

# elpt_igg_same30d |> dplyr::count(PRONTUARIO) |> dplyr::arrange(dplyr::desc(n))

# elpt_igg_same30d |> dplyr::count(PRONTUARIO) |> nrow()

```

# Methodology & References

All analyses were conducted using the `R` language and environment for statistical computing (R Core Team, 2025). The primary packages employed were `ggplot2` (Wickham, 2016), `dplyr` (Wickham et al., 2023), `lubridate` (Grolemund & Wickham, 2011), and `tidyr` (Wickham et al., 2024).

Up to the present stage, we have focused on data cleaning, data manipulation, and data visualization, involving the creation of features, generation of frequency tables, calculation of averages and descriptive statistics, graphical representations, and construction of tabular summaries from various perspectives.

In the next steps, we plan to apply generalized linear models (GLMs - McCullagh & Nelder, 1989) and generalized additive models (GAMs - Hastie & Tibshirani, 1990; Wood, 2017) - and, if necessary, their mixed-effects (Gelman & Hill, 2007) variants - to account for latent effects. The aim is to identify and quantify associations between the values of calculated globulin, gamma fraction, and immunoglobulin. We also intend to employ similar methodologies to describe and understand the clinical and epidemiological profiles present in the data.

Once the dataset in fully prepared, and if the necessary, we also plan to implement machine learning algorithms for classification and or forecasting purposes (James et al., 2021), while reserving the statistical models primarily for inference. Defining new cutoff points in contexts where they are still unknown - or validating existing ones - is also a goal. For this, both statistical and machine learning methods will be considered.

> R Core Team (2025). *R: A Language and Environment for Statistical Computing*. R Foundation for Statistical Computing, Vienna, Austria. <https://www.R-project.org/>.
>
> H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.
>
> Wickham H, François R, Henry L, Müller K, Vaughan D (2023). *dplyr: A Grammar of Data Manipulation*. R package version 1.1.4, <https://CRAN.R-project.org/package=dplyr>.
>
> Garrett Grolemund, Hadley Wickham (2011). Dates and Times Made Easy with lubridate. Journal of Statistical Software, 40(3), 1-25. URL <https://www.jstatsoft.org/v40/i03/.>
>
> Wickham H, Vaughan D, Girlich M (2024). *tidyr: Tidy Messy Data*. R package version 1.3.1, <https://CRAN.R-project.org/package=tidyr>.
>
> McCullagh, P., & Nelder, J. A. (1989). *Generalized Linear Models* (2nd ed.). Chapman & Hall.
>
> Hastie, T., & Tibshirani, R. (1990). *Generalized Additive Models*. Chapman & Hall.
>
> Wood, S. N. (2017). *Generalized Additive Models: An Introduction with R* (2nd ed.). CRC Press.
>
> Gelman, A., & Hill, J. (2007). *Data Analysis Using Regression and Multilevel/Hierarchical Models*. Cambridge University Press.
>
> James, G., Witten, D., Hastie, T., & Tibshirani, R. (2021). *An Introduction to Statistical Learning* (2nd ed.). Springer. <https://www.statlearning.com/>
