WARNING: unknown option '-2'


R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ##----------------------------------------------------------------------
> ##                                                     Henrique Laureano
> ##                      leg.ufpr.br/~henrique · github.com/mynameislaure
> ##                                      laureano@ufpr.br · @hap_laureano
> ##                     Laboratory of Statistics and Geoinformation (LEG)
> ##       2021-jan-29 · Federal University of Paraná · Curitiba/PR/Brazil
> ##----------------------------------------------------------------------
> 
> (args <- commandArgs())
[1] "/usr/lib/R/bin/exec/R" "-f"                    "nelder22.R"           
[4] "--restore"             "--save"                "--no-readline"        
[7] "-2"                   
> i <- abs(as.numeric(args[7]))
> 
> ## packages-------------------------------------------------------------
> ## library(TMB, lib.loc='/home/est/bonat/nobackup/github/')
> ## for some reason (memory probably), it doesn't run on the server, so
> ## let's try locally
> library(TMB)
> 
> ## load data and initial guesses----------------------------------------
> ## load('data22.RData')
> load('../data22.RData')
> 
> ## miscellaneous--------------------------------------------------------
> model <- 'multiGLMM_22'
> ## openmp(28)
> openmp(12)
[1] 12
> where <- 'nelder22'
> J <- 3e4
> t <- rep(seq(from=30, to=79.5, by=0.5), length.out=2*J)
> Z <- Matrix::bdiag(replicate(J, rep(1, 2), simplify=FALSE))
> R <- matrix(0, nrow=J, ncol=4)
> 
> logs2_init <- c(log(0.2), log(0.3), log(0.4), log(0.5))
> rhoZ_init <- c(atanh(0.15/sqrt(0.2*0.3)), atanh(0.15/sqrt(0.4*0.5)),
+                atanh(0.1/sqrt(0.2*0.4)), atanh(0.1/sqrt(0.3*0.5)))
> 
> ## model fitting--------------------------------------------------------
> ## compile(paste0('cpps/', model, '.cpp'))
> compile(paste0('../cpps/', model, '.cpp'))
make: Nothing to be done for 'all'.
[1] 0
> tmbpars <- list(beta1=initFixed[i, 1], beta2=initFixed[i, 2],
+                 gama1=initFixed[i, 3], gama2=initFixed[i, 4],
+                 w1=initFixed[i, 5], w2=initFixed[i, 6],
+                 R=R, logs2=logs2_init, rhoZ=rhoZ_init
+                 )
> if (!model%in%names(getLoadedDLLs())) {
+     cat(crayon::blue(clisymbols::symbol$star), 'Loading DLL\n')
+     ## dyn.load(dynlib(paste0('cpps/', model)))
+     dyn.load(dynlib(paste0('../cpps/', model)))
+     config(tape.parallel=FALSE, DLL=model)
+ }
★ Loading DLL
$trace.atomic
[1] 1

$trace.optimize
[1] 1

$trace.parallel
[1] 1

$tape.parallel
[1] 0

$optimize.parallel
[1] 0

$optimize.instantly
[1] 1

$debug.getListElement
[1] 0

> obj <- MakeADFun(data=list(Y=y[[i]], Z=Z, T=t, delta=80),
+                  parameters=tmbpars,
+                  DLL=model, random='R', hessian=TRUE, silent=TRUE)
> opt <- try(optim(obj$par, obj$fn, obj$gr), silent=TRUE)
> if (class(opt)!='try-error') {
+     write.table(rbind(c(opt$par, opt$convergence)),
+                 file=paste0(where, '.txt'),
+                 append=TRUE, col.names=FALSE) 
+     sdr <- try(sdreport(obj, par.fixed=TRUE, hessian.fixed=TRUE),
+                silent=TRUE)
+     if (class(sdr)!='try-error') {
+         eps <- c(summary(sdr, 'fixed')[, 2],
+                  summary(sdr, 'report')[, 2])
+         write.table(rbind(eps), file=paste0('eps_', where, '.txt'),
+                     append=TRUE, col.names=FALSE)
+     }
+ }
> FreeADFun(obj);gc()
NULL
           used  (Mb) gc trigger  (Mb) max used  (Mb)
Ncells  1480749  79.1    4494722 240.1  4494722 240.1
Vcells 29150435 222.5   61737538 471.1 61730349 471.0
> ## END------------------------------------------------------------------
> 
> proc.time()
     user    system   elapsed 
80996.945    74.790  9269.077 
